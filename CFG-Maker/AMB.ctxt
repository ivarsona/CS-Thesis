#BlueJ class context
comment0.params=p\ inSet
comment0.target=AMB(Program,\ InstructionSet)
comment1.params=
comment1.target=Program\ getProgram()
comment10.params=b\ start\ inSet
comment10.target=int\ nextInstruction(java.util.ArrayList,\ int,\ InstructionSet)
comment11.params=start\ startVal\ b\ inSet\ numBytes
comment11.target=InstructionByte\ disassembleInstruction(int,\ int,\ java.util.ArrayList,\ InstructionSet,\ int)
comment12.params=
comment12.target=void\ calcByteVals()
comment12.text=\r\n\ Fills\ in\ CodeBytes\ of\ program\ p\ by\ searching\ for\ rewrites\r\n\ \r\n\ @param\ \ p\ the\ Program\r\n\ @param\ inSet\ the\ instruction\ set\r\n
comment13.params=p\ inSet
comment13.target=java.util.ArrayList\ generateAllRuns(Program,\ InstructionSet)
comment2.params=
comment2.target=InstructionSet\ getInstructionSet()
comment3.params=
comment3.target=void\ analyze()
comment4.params=
comment4.target=int\ getAmountOfData()
comment5.params=begin
comment5.target=void\ recurse(int)
comment5.text=\r\n\ \r\n
comment6.params=base\ op
comment6.target=void\ handleInstruction(int,\ int)
comment7.params=bytes
comment7.target=java.util.ArrayList\ getDataBits(java.util.ArrayList)
comment7.text=\r\n\ Takes\ an\ arraylist\ of\ Codebytes\ that\ represents\ a\ set\ of\ data\ bits\ for\ an\ instruction.\r\n\ \r\n\ Using\ the\ size\ of\ the\ list\ of\ codebytes,\ it\ returns\ a\ list\ of\ a\ list\ of\ integers.\r\n\ The\ outermost\ list\ represents\ all\ possible\ combinations\ of\ the\ codebyte\ values.\r\n\ The\ innter\ lists\ are\ the\ specific\ combinations\r\n\ \r\n
comment8.params=baseAddr\ opcode\ bytes
comment8.target=InstructionByte\ parseDataBits(int,\ int,\ java.util.ArrayList)
comment8.text=\r\n\ Given\:\r\n\ A\ base\ address,\ an\ opcode,\ a\ list\ of\ CodeBytes,\ and\ an\ instruction\ set,\ this\ function\:\r\n\ \r\n\ Produces\ an\ InstructionByte\ which\ encapsulates\ all\ possible\ combinations\ of\ the\ given\ opcode\r\n\ with\ the\ data\ codebytes.\r\n
comment9.params=p\ inSet
comment9.target=java.util.ArrayList\ recAlgorithm(Program,\ InstructionSet)
comment9.text=\r\n\ Recursively\ goes\ through\ the\ algorithm\r\n\ \r\n\ @param\ the\ program\r\n\ @param\ the\ instruction\ set\r\n\ @return\ a\ list\ of\ instruction\ bytes\r\n
numComments=14
